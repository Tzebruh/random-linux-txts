first, set up a root fs for the container. the alpine minirootfs from their website is good and will be the example

setup root fs:
$ mkdir container-root
$ tar -xzf /path/to/alpine-minirootfs-x.yy.z-arch.tar.gz --directory container-root

isolate namespaces:
$ unshare -muinprf bash

make root fs into a mount point:
$ mount --bind container_root/ container_root/
$ cd container_root/
note: if you're already in container_root, still run `cd .` because pivot_root doesn't seem to understand that '.' is a mount point if you don't cd to it, i guess it refreshes bash's understanding of . or something, i don't know. this note is the whole reason i made this txt.

pivot root to the root fs:
$ mkdir old_root
$ pivot_root . old_root/
$ cd /

if you need to mount any filesystems like proc or read-only sys, do it right here as you can't do it after old_root is unmounted for security reasons.

unmount old root:
$ /bin/umount -l old_root/

switch to busybox sh:
$ PATH=/bin:/sbin:/usr/bin:/usr/sbin exec /bin/sh



POST TUTORIAL ADDITION: OVERLAY FS

instead of making an entire rootfs for each container, you can use overlay mounts to make a changes directory for each container instead and base off the same rootfs directory for each one.

in place of "setup root fs":
$ mkdir -p rootfs changes work merged
setup rootfs with your alpine root as earlier

in place of "make root fs into a mount point":
$ mount -t overlay overlay -o lowerdir=rootfs,upperdir=changes,workdir=work merged/
$ cd merged/

replace all further occurences of container_root with merged.
